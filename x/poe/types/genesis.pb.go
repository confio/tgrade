// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: confio/poe/v1beta1/genesis.proto

package types

import (
	encoding_json "encoding/json"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/CosmWasm/wasmd/x/wasm/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState - initial state of module
type GenesisState struct {
	// params defines all the parameter of the module
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// SeedContracts when enabled stores and instantiates the Proof of Engagement
	// contracts on the chain.
	SeedContracts bool `protobuf:"varint,2,opt,name=seed_contracts,json=seedContracts,proto3" json:"seed_contracts,omitempty"`
	// GenTxs defines the genesis transactions to create a validator.
	GenTxs []encoding_json.RawMessage `protobuf:"bytes,3,rep,name=gen_txs,json=genTxs,proto3,casttype=encoding/json.RawMessage" json:"gentxs" yaml:"gentxs"`
	// SystemAdminAddress single address that is set as admin for the PoE
	// contracts in seed mode.
	SystemAdminAddress string `protobuf:"bytes,4,opt,name=system_admin_address,json=systemAdminAddress,proto3" json:"system_admin_address,omitempty"`
	// Contracts Poe contract addresses and types when used with state dump in non
	// seed mode.
	Contracts []PoEContract `protobuf:"bytes,5,rep,name=contracts,proto3" json:"contracts,omitempty"`
	// Engagement weighted members of the engagement group. Validators should be
	// in here.
	Engagement              []TG4Member               `protobuf:"bytes,6,rep,name=engagement,proto3" json:"engagement,omitempty"`
	StakeContractConfig     *StakeContractConfig      `protobuf:"bytes,7,opt,name=stake_contract_config,json=stakeContractConfig,proto3" json:"stake_contract_config,omitempty"`
	ValsetContractConfig    *ValsetContractConfig     `protobuf:"bytes,8,opt,name=valset_contract_config,json=valsetContractConfig,proto3" json:"valset_contract_config,omitempty"`
	EngagmentContractConfig *EngagementContractConfig `protobuf:"bytes,9,opt,name=engagement_contract_config,json=engagmentContractConfig,proto3" json:"engagement_contract_config,omitempty"`
	// BondDenom defines the bondable coin denomination.
	BondDenom string `protobuf:"bytes,10,opt,name=bond_denom,json=bondDenom,proto3" json:"bond_denom,omitempty" yaml:"bond_denom"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a165193bab811d9d, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetSeedContracts() bool {
	if m != nil {
		return m.SeedContracts
	}
	return false
}

func (m *GenesisState) GetGenTxs() []encoding_json.RawMessage {
	if m != nil {
		return m.GenTxs
	}
	return nil
}

func (m *GenesisState) GetSystemAdminAddress() string {
	if m != nil {
		return m.SystemAdminAddress
	}
	return ""
}

func (m *GenesisState) GetContracts() []PoEContract {
	if m != nil {
		return m.Contracts
	}
	return nil
}

func (m *GenesisState) GetEngagement() []TG4Member {
	if m != nil {
		return m.Engagement
	}
	return nil
}

func (m *GenesisState) GetStakeContractConfig() *StakeContractConfig {
	if m != nil {
		return m.StakeContractConfig
	}
	return nil
}

func (m *GenesisState) GetValsetContractConfig() *ValsetContractConfig {
	if m != nil {
		return m.ValsetContractConfig
	}
	return nil
}

func (m *GenesisState) GetEngagmentContractConfig() *EngagementContractConfig {
	if m != nil {
		return m.EngagmentContractConfig
	}
	return nil
}

func (m *GenesisState) GetBondDenom() string {
	if m != nil {
		return m.BondDenom
	}
	return ""
}

// StakeContractConfig initial setup config
type StakeContractConfig struct {
	MinBond              uint64        `protobuf:"varint,1,opt,name=min_bond,json=minBond,proto3" json:"min_bond,omitempty"`
	TokensPerWeight      uint64        `protobuf:"varint,2,opt,name=tokens_per_weight,json=tokensPerWeight,proto3" json:"tokens_per_weight,omitempty"`
	UnbondingPeriod      time.Duration `protobuf:"bytes,3,opt,name=unbonding_period,json=unbondingPeriod,proto3,stdduration" json:"unbonding_period"`
	ClaimAutoreturnLimit uint32        `protobuf:"varint,4,opt,name=claim_autoreturn_limit,json=claimAutoreturnLimit,proto3" json:"claim_autoreturn_limit,omitempty"`
	PreAuths             uint32        `protobuf:"varint,5,opt,name=pre_auths,json=preAuths,proto3" json:"pre_auths,omitempty"`
}

func (m *StakeContractConfig) Reset()         { *m = StakeContractConfig{} }
func (m *StakeContractConfig) String() string { return proto.CompactTextString(m) }
func (*StakeContractConfig) ProtoMessage()    {}
func (*StakeContractConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a165193bab811d9d, []int{1}
}
func (m *StakeContractConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeContractConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeContractConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeContractConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeContractConfig.Merge(m, src)
}
func (m *StakeContractConfig) XXX_Size() int {
	return m.Size()
}
func (m *StakeContractConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeContractConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StakeContractConfig proto.InternalMessageInfo

func (m *StakeContractConfig) GetMinBond() uint64 {
	if m != nil {
		return m.MinBond
	}
	return 0
}

func (m *StakeContractConfig) GetTokensPerWeight() uint64 {
	if m != nil {
		return m.TokensPerWeight
	}
	return 0
}

func (m *StakeContractConfig) GetUnbondingPeriod() time.Duration {
	if m != nil {
		return m.UnbondingPeriod
	}
	return 0
}

func (m *StakeContractConfig) GetClaimAutoreturnLimit() uint32 {
	if m != nil {
		return m.ClaimAutoreturnLimit
	}
	return 0
}

func (m *StakeContractConfig) GetPreAuths() uint32 {
	if m != nil {
		return m.PreAuths
	}
	return 0
}

// ValsetContractConfig initial setup config
type ValsetContractConfig struct {
	MinWeight     uint64                                 `protobuf:"varint,1,opt,name=min_weight,json=minWeight,proto3" json:"min_weight,omitempty"`
	MaxValidators uint32                                 `protobuf:"varint,2,opt,name=max_validators,json=maxValidators,proto3" json:"max_validators,omitempty"`
	EpochLength   time.Duration                          `protobuf:"bytes,3,opt,name=epoch_length,json=epochLength,proto3,stdduration" json:"epoch_length"`
	EpochReward   types.Coin                             `protobuf:"bytes,4,opt,name=epoch_reward,json=epochReward,proto3" json:"epoch_reward"`
	Scaling       uint32                                 `protobuf:"varint,5,opt,name=scaling,proto3" json:"scaling,omitempty"`
	FeePercentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=fee_percentage,json=feePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_percentage"`
	// ValidatorsRewardRatio in percentage
	ValidatorsRewardRatio uint32 `protobuf:"varint,7,opt,name=ValidatorsRewardRatio,proto3" json:"ValidatorsRewardRatio,omitempty"`
	// AutoUnjail if set to true, we will auto-unjail any validator after their
	// jailtime is over.
	AutoUnjail bool `protobuf:"varint,8,opt,name=AutoUnjail,proto3" json:"AutoUnjail,omitempty"`
}

func (m *ValsetContractConfig) Reset()         { *m = ValsetContractConfig{} }
func (m *ValsetContractConfig) String() string { return proto.CompactTextString(m) }
func (*ValsetContractConfig) ProtoMessage()    {}
func (*ValsetContractConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a165193bab811d9d, []int{2}
}
func (m *ValsetContractConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValsetContractConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValsetContractConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValsetContractConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValsetContractConfig.Merge(m, src)
}
func (m *ValsetContractConfig) XXX_Size() int {
	return m.Size()
}
func (m *ValsetContractConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ValsetContractConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ValsetContractConfig proto.InternalMessageInfo

func (m *ValsetContractConfig) GetMinWeight() uint64 {
	if m != nil {
		return m.MinWeight
	}
	return 0
}

func (m *ValsetContractConfig) GetMaxValidators() uint32 {
	if m != nil {
		return m.MaxValidators
	}
	return 0
}

func (m *ValsetContractConfig) GetEpochLength() time.Duration {
	if m != nil {
		return m.EpochLength
	}
	return 0
}

func (m *ValsetContractConfig) GetEpochReward() types.Coin {
	if m != nil {
		return m.EpochReward
	}
	return types.Coin{}
}

func (m *ValsetContractConfig) GetScaling() uint32 {
	if m != nil {
		return m.Scaling
	}
	return 0
}

func (m *ValsetContractConfig) GetValidatorsRewardRatio() uint32 {
	if m != nil {
		return m.ValidatorsRewardRatio
	}
	return 0
}

func (m *ValsetContractConfig) GetAutoUnjail() bool {
	if m != nil {
		return m.AutoUnjail
	}
	return false
}

// EngagementContractConfig initial setup config
type EngagementContractConfig struct {
	Halflife time.Duration `protobuf:"bytes,1,opt,name=halflife,proto3,stdduration" json:"halflife"`
}

func (m *EngagementContractConfig) Reset()         { *m = EngagementContractConfig{} }
func (m *EngagementContractConfig) String() string { return proto.CompactTextString(m) }
func (*EngagementContractConfig) ProtoMessage()    {}
func (*EngagementContractConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a165193bab811d9d, []int{3}
}
func (m *EngagementContractConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EngagementContractConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EngagementContractConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EngagementContractConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngagementContractConfig.Merge(m, src)
}
func (m *EngagementContractConfig) XXX_Size() int {
	return m.Size()
}
func (m *EngagementContractConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EngagementContractConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EngagementContractConfig proto.InternalMessageInfo

func (m *EngagementContractConfig) GetHalflife() time.Duration {
	if m != nil {
		return m.Halflife
	}
	return 0
}

// PoEContract address and type information
type PoEContract struct {
	// ContractType type.
	ContractType PoEContractType `protobuf:"varint,1,opt,name=contract_type,json=contractType,proto3,enum=confio.poe.v1beta1.PoEContractType" json:"contract_type,omitempty"`
	// Address is the bech32 address string
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *PoEContract) Reset()         { *m = PoEContract{} }
func (m *PoEContract) String() string { return proto.CompactTextString(m) }
func (*PoEContract) ProtoMessage()    {}
func (*PoEContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_a165193bab811d9d, []int{4}
}
func (m *PoEContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoEContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoEContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoEContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoEContract.Merge(m, src)
}
func (m *PoEContract) XXX_Size() int {
	return m.Size()
}
func (m *PoEContract) XXX_DiscardUnknown() {
	xxx_messageInfo_PoEContract.DiscardUnknown(m)
}

var xxx_messageInfo_PoEContract proto.InternalMessageInfo

func (m *PoEContract) GetContractType() PoEContractType {
	if m != nil {
		return m.ContractType
	}
	return PoEContractTypeUndefined
}

func (m *PoEContract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// TG4Member member of the Engagement group.
type TG4Member struct {
	// Address is the bech32 address string
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"json"`
	Weight  uint64 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight"`
}

func (m *TG4Member) Reset()         { *m = TG4Member{} }
func (m *TG4Member) String() string { return proto.CompactTextString(m) }
func (*TG4Member) ProtoMessage()    {}
func (*TG4Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_a165193bab811d9d, []int{5}
}
func (m *TG4Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TG4Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TG4Member.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TG4Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TG4Member.Merge(m, src)
}
func (m *TG4Member) XXX_Size() int {
	return m.Size()
}
func (m *TG4Member) XXX_DiscardUnknown() {
	xxx_messageInfo_TG4Member.DiscardUnknown(m)
}

var xxx_messageInfo_TG4Member proto.InternalMessageInfo

func (m *TG4Member) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TG4Member) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "confio.poe.v1beta1.GenesisState")
	proto.RegisterType((*StakeContractConfig)(nil), "confio.poe.v1beta1.StakeContractConfig")
	proto.RegisterType((*ValsetContractConfig)(nil), "confio.poe.v1beta1.ValsetContractConfig")
	proto.RegisterType((*EngagementContractConfig)(nil), "confio.poe.v1beta1.EngagementContractConfig")
	proto.RegisterType((*PoEContract)(nil), "confio.poe.v1beta1.PoEContract")
	proto.RegisterType((*TG4Member)(nil), "confio.poe.v1beta1.TG4Member")
}

func init() { proto.RegisterFile("confio/poe/v1beta1/genesis.proto", fileDescriptor_a165193bab811d9d) }

var fileDescriptor_a165193bab811d9d = []byte{
	// 1038 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x41, 0x73, 0xdb, 0x44,
	0x14, 0x8e, 0x9a, 0xe0, 0xd8, 0x9b, 0x38, 0xa5, 0x5b, 0xb7, 0xa8, 0x69, 0x6b, 0x79, 0x9c, 0x96,
	0x7a, 0x98, 0x22, 0xd1, 0x90, 0x19, 0x18, 0x0e, 0x30, 0x51, 0x52, 0xca, 0xa1, 0x65, 0x32, 0x4a,
	0x5a, 0x66, 0xda, 0x83, 0x66, 0x2d, 0x3d, 0xcb, 0x6a, 0xa4, 0x5d, 0xa1, 0x5d, 0x27, 0xce, 0xad,
	0x07, 0x7e, 0x00, 0xdc, 0xf8, 0x17, 0xfc, 0x8d, 0x1e, 0x7b, 0x64, 0x38, 0x08, 0x26, 0xb9, 0xf9,
	0xd8, 0x23, 0x17, 0x98, 0x5d, 0xc9, 0xb2, 0x49, 0xd4, 0x01, 0x2e, 0xb6, 0x76, 0xdf, 0xfb, 0xbe,
	0xfd, 0xde, 0xdb, 0x7d, 0xef, 0xa1, 0x8e, 0xc7, 0xe8, 0x20, 0x64, 0x56, 0xc2, 0xc0, 0x3a, 0x7a,
	0xd0, 0x07, 0x41, 0x1e, 0x58, 0x01, 0x50, 0xe0, 0x21, 0x37, 0x93, 0x94, 0x09, 0x86, 0x71, 0xee,
	0x61, 0x26, 0x0c, 0xcc, 0xc2, 0x63, 0xbd, 0x15, 0xb0, 0x80, 0x29, 0xb3, 0x25, 0xbf, 0x72, 0xcf,
	0xf5, 0xb6, 0xc7, 0x78, 0xcc, 0xb8, 0xd5, 0x27, 0x7c, 0x46, 0xe6, 0xb1, 0x90, 0xce, 0xdb, 0x8f,
	0x09, 0x8f, 0x2d, 0xf5, 0x73, 0x74, 0xee, 0xa4, 0xf5, 0x5b, 0x15, 0x5a, 0xe4, 0xa9, 0x05, 0x3a,
	0x60, 0x2c, 0x88, 0xc0, 0x52, 0xab, 0xfe, 0x68, 0x60, 0xf9, 0xa3, 0x94, 0x88, 0x90, 0x15, 0xec,
	0xdd, 0x57, 0xcb, 0x68, 0xf5, 0x51, 0xce, 0xb7, 0x2f, 0x88, 0x00, 0xfc, 0x39, 0xaa, 0x25, 0x24,
	0x25, 0x31, 0xd7, 0xb5, 0x8e, 0xd6, 0x5b, 0xd9, 0x5c, 0x37, 0x2f, 0x46, 0x62, 0xee, 0x29, 0x0f,
	0x7b, 0xe9, 0x75, 0x66, 0x2c, 0x38, 0x85, 0x3f, 0xbe, 0x8b, 0xd6, 0x38, 0x80, 0xef, 0x7a, 0x8c,
	0x8a, 0x94, 0x78, 0x82, 0xeb, 0x97, 0x3a, 0x5a, 0xaf, 0xee, 0x34, 0xe5, 0xee, 0xce, 0x74, 0x13,
	0xef, 0xa1, 0xe5, 0x00, 0xa8, 0x2b, 0xc6, 0x5c, 0x5f, 0xec, 0x2c, 0xf6, 0x56, 0xed, 0xcf, 0x26,
	0x99, 0x51, 0x0b, 0x80, 0x8a, 0x31, 0x7f, 0x9b, 0x19, 0xcd, 0x13, 0x12, 0x47, 0x5f, 0x74, 0xf3,
	0x75, 0xf7, 0xcf, 0xcc, 0xd0, 0x81, 0x7a, 0xcc, 0x0f, 0x69, 0x60, 0xbd, 0xe4, 0x8c, 0x9a, 0x0e,
	0x39, 0x7e, 0x02, 0x9c, 0x93, 0x00, 0x1c, 0x09, 0x3a, 0x18, 0x73, 0xfc, 0x09, 0x6a, 0xf1, 0x13,
	0x2e, 0x20, 0x76, 0x89, 0x1f, 0x87, 0xd4, 0x25, 0xbe, 0x9f, 0x02, 0xe7, 0xfa, 0x52, 0x47, 0xeb,
	0x35, 0x1c, 0x9c, 0xdb, 0xb6, 0xa5, 0x69, 0x3b, 0xb7, 0xe0, 0xe7, 0xa8, 0x31, 0x53, 0xf9, 0x5e,
	0x67, 0xb1, 0xb7, 0xb2, 0x69, 0x54, 0xc6, 0xc9, 0x1e, 0x4e, 0x85, 0xdb, 0x37, 0x65, 0xb0, 0x93,
	0xcc, 0xb8, 0x5a, 0x22, 0xef, 0xb3, 0x38, 0x14, 0x10, 0x27, 0xe2, 0xc4, 0x99, 0xd1, 0xe1, 0x17,
	0x08, 0x01, 0x0d, 0x48, 0x00, 0x31, 0x50, 0xa1, 0xd7, 0x14, 0xf9, 0xed, 0x2a, 0xf2, 0x83, 0x47,
	0x5b, 0x4f, 0x20, 0xee, 0x43, 0x6a, 0xdf, 0x2a, 0xa8, 0x5b, 0x33, 0xe0, 0x1c, 0xf7, 0x1c, 0x1d,
	0x7e, 0xa5, 0xa1, 0x6b, 0x5c, 0x90, 0x43, 0x28, 0xb3, 0xec, 0x2a, 0xe6, 0x40, 0x5f, 0x56, 0xb7,
	0x75, 0xaf, 0xea, 0xa0, 0x7d, 0x09, 0x98, 0xc6, 0xb1, 0xa3, 0xdc, 0xed, 0x8d, 0x49, 0x66, 0x18,
	0x95, 0x4c, 0x73, 0x27, 0x5f, 0xe5, 0x17, 0x91, 0xf8, 0x07, 0x0d, 0x5d, 0x3f, 0x22, 0x11, 0x07,
	0x71, 0x41, 0x43, 0x5d, 0x69, 0xe8, 0x55, 0x69, 0x78, 0xa6, 0x10, 0xe7, 0x44, 0xdc, 0x99, 0x64,
	0x46, 0xa7, 0x9a, 0x6b, 0x4e, 0x45, 0xeb, 0xa8, 0x02, 0x8b, 0x7f, 0xd2, 0xd0, 0x0d, 0x95, 0x18,
	0x99, 0x97, 0x0b, 0x4a, 0x1a, 0x4a, 0xc9, 0xfd, 0x2a, 0x25, 0x0f, 0xcb, 0x6c, 0x9e, 0x53, 0x73,
	0x6f, 0x92, 0x19, 0x1b, 0xef, 0xa4, 0x9c, 0x13, 0xf4, 0x41, 0xe9, 0x74, 0x4e, 0xd3, 0x16, 0x42,
	0x7d, 0x46, 0x7d, 0xd7, 0x07, 0xca, 0x62, 0x1d, 0xc9, 0xe7, 0x67, 0x5f, 0x7b, 0x9b, 0x19, 0x57,
	0xf2, 0x37, 0x3d, 0xb3, 0x75, 0x9d, 0x86, 0x5c, 0xec, 0xaa, 0xef, 0xbf, 0x34, 0x74, 0xb5, 0xe2,
	0x8a, 0xf0, 0x0d, 0x54, 0x97, 0xaf, 0x59, 0x3a, 0xaa, 0x5a, 0x5c, 0x72, 0x96, 0xe3, 0x90, 0xda,
	0x8c, 0xfa, 0xf8, 0x23, 0x74, 0x45, 0xb0, 0x43, 0xa0, 0xdc, 0x4d, 0x20, 0x75, 0x8f, 0x21, 0x0c,
	0x86, 0x42, 0x55, 0xdb, 0x92, 0x73, 0x39, 0x37, 0xec, 0x41, 0xfa, 0x9d, 0xda, 0xc6, 0xdf, 0xa2,
	0xf7, 0x47, 0x54, 0x92, 0x84, 0x34, 0x90, 0xee, 0x21, 0xf3, 0xf5, 0x45, 0x95, 0x9e, 0x1b, 0x66,
	0xde, 0x1c, 0xcc, 0x69, 0x73, 0x30, 0x77, 0x8b, 0xe6, 0x60, 0xd7, 0xe5, 0x8b, 0xfc, 0xf9, 0x77,
	0x43, 0x73, 0x2e, 0x97, 0xe0, 0x3d, 0x85, 0xc5, 0x5b, 0xe8, 0xba, 0x17, 0x91, 0x30, 0x76, 0xc9,
	0x48, 0xb0, 0x14, 0xc4, 0x28, 0xa5, 0x6e, 0x14, 0xc6, 0xa1, 0x50, 0xf5, 0xd6, 0x74, 0x5a, 0xca,
	0xba, 0x5d, 0x1a, 0x1f, 0x4b, 0x1b, 0xbe, 0x89, 0x1a, 0x49, 0x0a, 0x12, 0x33, 0x94, 0x15, 0x27,
	0x1d, 0xeb, 0x49, 0x0a, 0xdb, 0x72, 0xdd, 0xfd, 0x65, 0x11, 0xb5, 0xaa, 0x1e, 0x08, 0xbe, 0x8d,
	0x90, 0x4c, 0x41, 0x11, 0x60, 0x9e, 0x84, 0x46, 0x1c, 0xd2, 0x22, 0xb4, 0xbb, 0x68, 0x2d, 0x26,
	0x63, 0xf7, 0x88, 0x44, 0xa1, 0x4f, 0x04, 0x4b, 0xf3, 0x8e, 0xd3, 0x74, 0x9a, 0x31, 0x19, 0x3f,
	0x2b, 0x37, 0xf1, 0xd7, 0x68, 0x15, 0x12, 0xe6, 0x0d, 0xdd, 0x08, 0x68, 0x20, 0x86, 0xff, 0x27,
	0xfa, 0x15, 0x05, 0x7c, 0xac, 0x70, 0xd8, 0x9e, 0xf2, 0xa4, 0x70, 0x4c, 0x52, 0x5f, 0xc5, 0x2b,
	0x79, 0xf2, 0x06, 0x6e, 0xca, 0x06, 0x5e, 0xbe, 0xb2, 0x1d, 0x16, 0xd2, 0xa2, 0x3f, 0xe6, 0x1c,
	0x8e, 0xc2, 0x60, 0x1d, 0x2d, 0x73, 0x8f, 0x44, 0x21, 0x0d, 0x8a, 0x2c, 0x4c, 0x97, 0xf8, 0x29,
	0x5a, 0x1b, 0x00, 0xc8, 0x1b, 0xf2, 0x80, 0x0a, 0x12, 0x80, 0x5e, 0x53, 0x0f, 0xc8, 0x94, 0x24,
	0xbf, 0x65, 0xc6, 0x87, 0x41, 0x28, 0x86, 0xa3, 0xbe, 0xe9, 0xb1, 0xd8, 0x2a, 0x46, 0x46, 0xfe,
	0xf7, 0x31, 0xf7, 0x0f, 0x2d, 0x71, 0x92, 0x00, 0x37, 0x77, 0xc1, 0x73, 0x9a, 0x03, 0x80, 0xbd,
	0x92, 0x04, 0x6f, 0xa1, 0x6b, 0xb3, 0x54, 0xe4, 0x22, 0x1c, 0x19, 0xa5, 0x6a, 0x18, 0x4d, 0xa7,
	0xda, 0x88, 0xdb, 0x08, 0xc9, 0x1b, 0x7c, 0x4a, 0x5f, 0x92, 0x30, 0x52, 0x75, 0x5d, 0x77, 0xe6,
	0x76, 0xba, 0x2f, 0x90, 0xfe, 0xae, 0x3a, 0xc2, 0x5f, 0xa1, 0xfa, 0x90, 0x44, 0x83, 0x28, 0x1c,
	0x40, 0x31, 0x43, 0xfe, 0x53, 0xaa, 0x4b, 0x50, 0xf7, 0x7b, 0xb4, 0x32, 0xd7, 0x78, 0xf1, 0x37,
	0xa8, 0x59, 0xd6, 0xa2, 0x0c, 0x53, 0x91, 0xae, 0x6d, 0x6e, 0xfc, 0x4b, 0xc3, 0x3e, 0x38, 0x49,
	0xc0, 0x59, 0xf5, 0xe6, 0x56, 0x32, 0xf9, 0xd3, 0xd9, 0x70, 0x49, 0xcd, 0x86, 0xe9, 0xb2, 0xbb,
	0x8f, 0x1a, 0x65, 0x3b, 0xc6, 0xdd, 0x99, 0x9b, 0xa6, 0xae, 0xa0, 0x3e, 0xc9, 0x8c, 0x25, 0x39,
	0x7d, 0x4a, 0x00, 0xee, 0xa2, 0xda, 0x7c, 0xd9, 0xd9, 0x48, 0x0e, 0xb1, 0x7c, 0xc7, 0x29, 0xfe,
	0xed, 0x2f, 0x5f, 0x9f, 0xb6, 0xb5, 0x37, 0xa7, 0x6d, 0xed, 0x8f, 0xd3, 0xb6, 0xf6, 0xe3, 0x59,
	0x7b, 0xe1, 0xcd, 0x59, 0x7b, 0xe1, 0xd7, 0xb3, 0xf6, 0xc2, 0xf3, 0x3b, 0xff, 0xb8, 0x4b, 0x35,
	0xbe, 0x45, 0x90, 0x12, 0x1f, 0xac, 0xb1, 0x9a, 0xe3, 0xea, 0x36, 0xfb, 0x35, 0x95, 0xae, 0x4f,
	0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x7e, 0xd8, 0x99, 0x6e, 0x08, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondDenom) > 0 {
		i -= len(m.BondDenom)
		copy(dAtA[i:], m.BondDenom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.BondDenom)))
		i--
		dAtA[i] = 0x52
	}
	if m.EngagmentContractConfig != nil {
		{
			size, err := m.EngagmentContractConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ValsetContractConfig != nil {
		{
			size, err := m.ValsetContractConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.StakeContractConfig != nil {
		{
			size, err := m.StakeContractConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Engagement) > 0 {
		for iNdEx := len(m.Engagement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Engagement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SystemAdminAddress) > 0 {
		i -= len(m.SystemAdminAddress)
		copy(dAtA[i:], m.SystemAdminAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.SystemAdminAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GenTxs) > 0 {
		for iNdEx := len(m.GenTxs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GenTxs[iNdEx])
			copy(dAtA[i:], m.GenTxs[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.GenTxs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SeedContracts {
		i--
		if m.SeedContracts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StakeContractConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeContractConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeContractConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PreAuths != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PreAuths))
		i--
		dAtA[i] = 0x28
	}
	if m.ClaimAutoreturnLimit != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ClaimAutoreturnLimit))
		i--
		dAtA[i] = 0x20
	}
	n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.UnbondingPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingPeriod):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintGenesis(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1a
	if m.TokensPerWeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TokensPerWeight))
		i--
		dAtA[i] = 0x10
	}
	if m.MinBond != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MinBond))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValsetContractConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValsetContractConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValsetContractConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoUnjail {
		i--
		if m.AutoUnjail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ValidatorsRewardRatio != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValidatorsRewardRatio))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.FeePercentage.Size()
		i -= size
		if _, err := m.FeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Scaling != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Scaling))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.EpochReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.EpochLength, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.EpochLength):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintGenesis(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x1a
	if m.MaxValidators != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MaxValidators))
		i--
		dAtA[i] = 0x10
	}
	if m.MinWeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MinWeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EngagementContractConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngagementContractConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EngagementContractConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n8, err8 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Halflife, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Halflife):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintGenesis(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PoEContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoEContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoEContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.ContractType != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ContractType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TG4Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TG4Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TG4Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.SeedContracts {
		n += 2
	}
	if len(m.GenTxs) > 0 {
		for _, b := range m.GenTxs {
			l = len(b)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.SystemAdminAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Engagement) > 0 {
		for _, e := range m.Engagement {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.StakeContractConfig != nil {
		l = m.StakeContractConfig.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.ValsetContractConfig != nil {
		l = m.ValsetContractConfig.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.EngagmentContractConfig != nil {
		l = m.EngagmentContractConfig.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.BondDenom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *StakeContractConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinBond != 0 {
		n += 1 + sovGenesis(uint64(m.MinBond))
	}
	if m.TokensPerWeight != 0 {
		n += 1 + sovGenesis(uint64(m.TokensPerWeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingPeriod)
	n += 1 + l + sovGenesis(uint64(l))
	if m.ClaimAutoreturnLimit != 0 {
		n += 1 + sovGenesis(uint64(m.ClaimAutoreturnLimit))
	}
	if m.PreAuths != 0 {
		n += 1 + sovGenesis(uint64(m.PreAuths))
	}
	return n
}

func (m *ValsetContractConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinWeight != 0 {
		n += 1 + sovGenesis(uint64(m.MinWeight))
	}
	if m.MaxValidators != 0 {
		n += 1 + sovGenesis(uint64(m.MaxValidators))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.EpochLength)
	n += 1 + l + sovGenesis(uint64(l))
	l = m.EpochReward.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.Scaling != 0 {
		n += 1 + sovGenesis(uint64(m.Scaling))
	}
	l = m.FeePercentage.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.ValidatorsRewardRatio != 0 {
		n += 1 + sovGenesis(uint64(m.ValidatorsRewardRatio))
	}
	if m.AutoUnjail {
		n += 2
	}
	return n
}

func (m *EngagementContractConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Halflife)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PoEContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractType != 0 {
		n += 1 + sovGenesis(uint64(m.ContractType))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *TG4Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovGenesis(uint64(m.Weight))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeedContracts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SeedContracts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenTxs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenTxs = append(m.GenTxs, make([]byte, postIndex-iNdEx))
			copy(m.GenTxs[len(m.GenTxs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemAdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemAdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, PoEContract{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Engagement = append(m.Engagement, TG4Member{})
			if err := m.Engagement[len(m.Engagement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeContractConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeContractConfig == nil {
				m.StakeContractConfig = &StakeContractConfig{}
			}
			if err := m.StakeContractConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetContractConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValsetContractConfig == nil {
				m.ValsetContractConfig = &ValsetContractConfig{}
			}
			if err := m.ValsetContractConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngagmentContractConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EngagmentContractConfig == nil {
				m.EngagmentContractConfig = &EngagementContractConfig{}
			}
			if err := m.EngagmentContractConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeContractConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeContractConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeContractConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBond", wireType)
			}
			m.MinBond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensPerWeight", wireType)
			}
			m.TokensPerWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokensPerWeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.UnbondingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAutoreturnLimit", wireType)
			}
			m.ClaimAutoreturnLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimAutoreturnLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreAuths", wireType)
			}
			m.PreAuths = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreAuths |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValsetContractConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValsetContractConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValsetContractConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinWeight", wireType)
			}
			m.MinWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinWeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidators", wireType)
			}
			m.MaxValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.EpochLength, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scaling", wireType)
			}
			m.Scaling = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scaling |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsRewardRatio", wireType)
			}
			m.ValidatorsRewardRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorsRewardRatio |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUnjail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoUnjail = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngagementContractConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EngagementContractConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EngagementContractConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Halflife", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Halflife, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoEContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoEContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoEContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractType", wireType)
			}
			m.ContractType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractType |= PoEContractType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TG4Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TG4Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TG4Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
