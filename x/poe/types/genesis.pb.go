// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: confio/poe/v1beta1/genesis.proto

package types

import (
	encoding_json "encoding/json"
	fmt "fmt"
	_ "github.com/CosmWasm/wasmd/x/wasm/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoEContractTypes int32

const (
	PoEContractTypes_UNDEFINED  PoEContractTypes = 0
	PoEContractTypes_STAKING    PoEContractTypes = 1
	PoEContractTypes_VALSET     PoEContractTypes = 2
	PoEContractTypes_ENGAGEMENT PoEContractTypes = 3
	PoEContractTypes_MIXER      PoEContractTypes = 4
)

var PoEContractTypes_name = map[int32]string{
	0: "UNDEFINED",
	1: "STAKING",
	2: "VALSET",
	3: "ENGAGEMENT",
	4: "MIXER",
}

var PoEContractTypes_value = map[string]int32{
	"UNDEFINED":  0,
	"STAKING":    1,
	"VALSET":     2,
	"ENGAGEMENT": 3,
	"MIXER":      4,
}

func (x PoEContractTypes) String() string {
	return proto.EnumName(PoEContractTypes_name, int32(x))
}

func (PoEContractTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a165193bab811d9d, []int{0}
}

// GenesisState - initial state of module
type GenesisState struct {
	// SeedContracts when enabled stores and instantiates the Proof of Engagement
	// contracts on the chain.
	SeedContracts bool `protobuf:"varint,1,opt,name=seed_contracts,json=seedContracts,proto3" json:"seed_contracts,omitempty"`
	// gen_txs defines the genesis transactions.
	GenTxs             []encoding_json.RawMessage `protobuf:"bytes,2,rep,name=gen_txs,json=genTxs,proto3,casttype=encoding/json.RawMessage" json:"gentxs" yaml:"gentxs"`
	SystemAdminAddress string                     `protobuf:"bytes,3,opt,name=system_admin_address,json=systemAdminAddress,proto3" json:"system_admin_address,omitempty"`
	Contracts          []*PoEContract             `protobuf:"bytes,4,rep,name=contracts,proto3" json:"contracts,omitempty"`
	Engagement         []TG4Members               `protobuf:"bytes,5,rep,name=engagement,proto3" json:"engagement,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a165193bab811d9d, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetSeedContracts() bool {
	if m != nil {
		return m.SeedContracts
	}
	return false
}

func (m *GenesisState) GetGenTxs() []encoding_json.RawMessage {
	if m != nil {
		return m.GenTxs
	}
	return nil
}

func (m *GenesisState) GetSystemAdminAddress() string {
	if m != nil {
		return m.SystemAdminAddress
	}
	return ""
}

func (m *GenesisState) GetContracts() []*PoEContract {
	if m != nil {
		return m.Contracts
	}
	return nil
}

func (m *GenesisState) GetEngagement() []TG4Members {
	if m != nil {
		return m.Engagement
	}
	return nil
}

type PoEContract struct {
	ContractType *PoEContract `protobuf:"bytes,1,opt,name=contract_type,json=contractType,proto3" json:"contract_type,omitempty"`
	// Address is the bech32 address string
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *PoEContract) Reset()         { *m = PoEContract{} }
func (m *PoEContract) String() string { return proto.CompactTextString(m) }
func (*PoEContract) ProtoMessage()    {}
func (*PoEContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_a165193bab811d9d, []int{1}
}
func (m *PoEContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoEContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoEContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoEContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoEContract.Merge(m, src)
}
func (m *PoEContract) XXX_Size() int {
	return m.Size()
}
func (m *PoEContract) XXX_DiscardUnknown() {
	xxx_messageInfo_PoEContract.DiscardUnknown(m)
}

var xxx_messageInfo_PoEContract proto.InternalMessageInfo

func (m *PoEContract) GetContractType() *PoEContract {
	if m != nil {
		return m.ContractType
	}
	return nil
}

func (m *PoEContract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type TG4Members struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"json"`
	Weight  uint64 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight"`
}

func (m *TG4Members) Reset()         { *m = TG4Members{} }
func (m *TG4Members) String() string { return proto.CompactTextString(m) }
func (*TG4Members) ProtoMessage()    {}
func (*TG4Members) Descriptor() ([]byte, []int) {
	return fileDescriptor_a165193bab811d9d, []int{2}
}
func (m *TG4Members) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TG4Members) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TG4Members.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TG4Members) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TG4Members.Merge(m, src)
}
func (m *TG4Members) XXX_Size() int {
	return m.Size()
}
func (m *TG4Members) XXX_DiscardUnknown() {
	xxx_messageInfo_TG4Members.DiscardUnknown(m)
}

var xxx_messageInfo_TG4Members proto.InternalMessageInfo

func (m *TG4Members) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TG4Members) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterEnum("confio.poe.v1beta1.PoEContractTypes", PoEContractTypes_name, PoEContractTypes_value)
	proto.RegisterType((*GenesisState)(nil), "confio.poe.v1beta1.GenesisState")
	proto.RegisterType((*PoEContract)(nil), "confio.poe.v1beta1.PoEContract")
	proto.RegisterType((*TG4Members)(nil), "confio.poe.v1beta1.TG4Members")
}

func init() { proto.RegisterFile("confio/poe/v1beta1/genesis.proto", fileDescriptor_a165193bab811d9d) }

var fileDescriptor_a165193bab811d9d = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x8b, 0xd3, 0x4e,
	0x14, 0x6e, 0xda, 0x6e, 0x77, 0x3b, 0xbb, 0x5d, 0xc2, 0xb0, 0x87, 0xb0, 0xfc, 0x48, 0x4a, 0x7e,
	0x0a, 0x45, 0x24, 0x71, 0x55, 0x10, 0x04, 0x85, 0xd6, 0x8d, 0xa5, 0x68, 0xcb, 0x92, 0x66, 0x45,
	0x44, 0x28, 0xd3, 0xe4, 0x39, 0x1b, 0x31, 0x33, 0xa1, 0x33, 0xda, 0xf6, 0xbf, 0xf0, 0xcf, 0xda,
	0xe3, 0x9e, 0xc4, 0x53, 0x90, 0xf6, 0xd6, 0xa3, 0x47, 0x4f, 0x92, 0xa4, 0x31, 0x05, 0xf7, 0xe0,
	0x25, 0xc9, 0xbc, 0xef, 0x7d, 0xef, 0xfb, 0xf8, 0x32, 0x0f, 0xb5, 0x7d, 0xce, 0x3e, 0x84, 0xdc,
	0x8e, 0x39, 0xd8, 0x5f, 0xce, 0xa6, 0x20, 0xc9, 0x99, 0x4d, 0x81, 0x81, 0x08, 0x85, 0x15, 0xcf,
	0xb8, 0xe4, 0x18, 0xe7, 0x1d, 0x56, 0xcc, 0xc1, 0xda, 0x76, 0x9c, 0x9e, 0x50, 0x4e, 0x79, 0x06,
	0xdb, 0xe9, 0x57, 0xde, 0x79, 0xaa, 0xfb, 0x5c, 0x44, 0x5c, 0xd8, 0x53, 0x22, 0xca, 0x61, 0x3e,
	0x0f, 0xd9, 0x16, 0xff, 0x3f, 0xc5, 0xe7, 0x44, 0x44, 0x76, 0xf6, 0xb8, 0x55, 0xce, 0xfc, 0x56,
	0x45, 0x47, 0xfd, 0xbc, 0x32, 0x96, 0x44, 0x02, 0xbe, 0x8b, 0x8e, 0x05, 0x40, 0x30, 0xf1, 0x39,
	0x93, 0x33, 0xe2, 0x4b, 0xa1, 0x29, 0x6d, 0xa5, 0x73, 0xe0, 0xb6, 0xd2, 0xea, 0x8b, 0xa2, 0x88,
	0x2f, 0xd0, 0x3e, 0x05, 0x36, 0x91, 0x0b, 0xa1, 0x55, 0xdb, 0xb5, 0xce, 0x51, 0xef, 0xc9, 0x26,
	0x31, 0x1a, 0x14, 0x98, 0x5c, 0x88, 0x9f, 0x89, 0xd1, 0x5a, 0x92, 0xe8, 0xd3, 0x53, 0x33, 0x3f,
	0x9b, 0xbf, 0x12, 0x43, 0x03, 0xe6, 0xf3, 0x20, 0x64, 0xd4, 0xfe, 0x28, 0x38, 0xb3, 0x5c, 0x32,
	0x1f, 0x82, 0x10, 0x84, 0x82, 0x9b, 0x92, 0xbc, 0x85, 0xc0, 0x0f, 0xd0, 0x89, 0x58, 0x0a, 0x09,
	0xd1, 0x84, 0x04, 0x51, 0xc8, 0x26, 0x24, 0x08, 0x66, 0x20, 0x84, 0x56, 0x6b, 0x2b, 0x9d, 0xa6,
	0x8b, 0x73, 0xac, 0x9b, 0x42, 0xdd, 0x1c, 0xc1, 0xcf, 0x50, 0xb3, 0x74, 0x59, 0x6f, 0xd7, 0x3a,
	0x87, 0x0f, 0x0d, 0xeb, 0xef, 0xf8, 0xac, 0x0b, 0xee, 0x14, 0xc6, 0xdd, 0x92, 0x81, 0xdf, 0x23,
	0x04, 0x8c, 0x12, 0x0a, 0x11, 0x30, 0xa9, 0xed, 0x65, 0x7c, 0xfd, 0x36, 0xbe, 0xd7, 0x7f, 0x3c,
	0x84, 0x68, 0x0a, 0x33, 0xd1, 0xfb, 0xef, 0x3a, 0x31, 0x2a, 0x9b, 0xc4, 0x38, 0x29, 0x99, 0xf7,
	0x79, 0x14, 0x4a, 0x88, 0x62, 0xb9, 0x74, 0x77, 0xe6, 0x99, 0x11, 0x3a, 0xdc, 0xd1, 0xc5, 0xe7,
	0xa8, 0x55, 0x28, 0x4f, 0xe4, 0x32, 0x86, 0x2c, 0xd5, 0x7f, 0xf0, 0x7b, 0x54, 0xb0, 0xbc, 0x65,
	0x0c, 0x58, 0x43, 0xfb, 0x45, 0x2c, 0xd5, 0x2c, 0x96, 0xe2, 0x68, 0x7a, 0x08, 0x95, 0x36, 0xb1,
	0x59, 0xf6, 0xa5, 0x3a, 0xcd, 0xde, 0xc1, 0x26, 0x31, 0xea, 0x69, 0xf2, 0x7f, 0x18, 0xd8, 0x44,
	0x8d, 0x39, 0x84, 0xf4, 0x4a, 0x66, 0xa3, 0xea, 0x3d, 0x94, 0xfe, 0xc0, 0xbc, 0xe2, 0x6e, 0xdf,
	0xf7, 0x2e, 0x91, 0xba, 0x63, 0x26, 0xb5, 0x20, 0x70, 0x0b, 0x35, 0x2f, 0x47, 0xe7, 0xce, 0xcb,
	0xc1, 0xc8, 0x39, 0x57, 0x2b, 0xf8, 0x10, 0xed, 0x8f, 0xbd, 0xee, 0xab, 0xc1, 0xa8, 0xaf, 0x2a,
	0x18, 0xa1, 0xc6, 0x9b, 0xee, 0xeb, 0xb1, 0xe3, 0xa9, 0x55, 0x7c, 0x8c, 0x90, 0x33, 0xea, 0x77,
	0xfb, 0xce, 0xd0, 0x19, 0x79, 0x6a, 0x0d, 0x37, 0xd1, 0xde, 0x70, 0xf0, 0xd6, 0x71, 0xd5, 0x7a,
	0xef, 0xf9, 0xf5, 0x4a, 0x57, 0x6e, 0x56, 0xba, 0xf2, 0x63, 0xa5, 0x2b, 0x5f, 0xd7, 0x7a, 0xe5,
	0x66, 0xad, 0x57, 0xbe, 0xaf, 0xf5, 0xca, 0xbb, 0x3b, 0x34, 0x94, 0x57, 0x9f, 0xa7, 0x96, 0xcf,
	0x23, 0x7b, 0xbb, 0x2a, 0x92, 0xce, 0x48, 0x00, 0xf6, 0x22, 0xdb, 0x99, 0x34, 0x3a, 0x31, 0x6d,
	0x64, 0x77, 0xf7, 0xd1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x97, 0x9c, 0x93, 0x4e, 0x03,
	0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Engagement) > 0 {
		for iNdEx := len(m.Engagement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Engagement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SystemAdminAddress) > 0 {
		i -= len(m.SystemAdminAddress)
		copy(dAtA[i:], m.SystemAdminAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.SystemAdminAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GenTxs) > 0 {
		for iNdEx := len(m.GenTxs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GenTxs[iNdEx])
			copy(dAtA[i:], m.GenTxs[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.GenTxs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SeedContracts {
		i--
		if m.SeedContracts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoEContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoEContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoEContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.ContractType != nil {
		{
			size, err := m.ContractType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TG4Members) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TG4Members) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TG4Members) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeedContracts {
		n += 2
	}
	if len(m.GenTxs) > 0 {
		for _, b := range m.GenTxs {
			l = len(b)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.SystemAdminAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Engagement) > 0 {
		for _, e := range m.Engagement {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *PoEContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractType != nil {
		l = m.ContractType.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *TG4Members) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovGenesis(uint64(m.Weight))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeedContracts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SeedContracts = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenTxs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenTxs = append(m.GenTxs, make([]byte, postIndex-iNdEx))
			copy(m.GenTxs[len(m.GenTxs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemAdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemAdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, &PoEContract{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Engagement = append(m.Engagement, TG4Members{})
			if err := m.Engagement[len(m.Engagement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoEContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoEContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoEContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractType == nil {
				m.ContractType = &PoEContract{}
			}
			if err := m.ContractType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TG4Members) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TG4Members: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TG4Members: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
