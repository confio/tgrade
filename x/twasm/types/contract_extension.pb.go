// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: confio/twasm/v1beta1/contract_extension.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TgradeContractDetails is a custom extension to the wasmd ContractInfo
type TgradeContractDetails struct {
	RegisteredPrivileges []RegisteredPrivilege `protobuf:"bytes,1,rep,name=registered_privileges,json=registeredPrivileges,proto3" json:"registered_privileges"`
}

func (m *TgradeContractDetails) Reset()         { *m = TgradeContractDetails{} }
func (m *TgradeContractDetails) String() string { return proto.CompactTextString(m) }
func (*TgradeContractDetails) ProtoMessage()    {}
func (*TgradeContractDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb24c05a9eda05e, []int{0}
}
func (m *TgradeContractDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TgradeContractDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TgradeContractDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TgradeContractDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TgradeContractDetails.Merge(m, src)
}
func (m *TgradeContractDetails) XXX_Size() int {
	return m.Size()
}
func (m *TgradeContractDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_TgradeContractDetails.DiscardUnknown(m)
}

var xxx_messageInfo_TgradeContractDetails proto.InternalMessageInfo

// RegisteredPrivilege stores position and privilege name
type RegisteredPrivilege struct {
	Position      uint32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	PrivilegeType string `protobuf:"bytes,2,opt,name=privilege_type,json=privilegeType,proto3" json:"privilege_type,omitempty"`
}

func (m *RegisteredPrivilege) Reset()         { *m = RegisteredPrivilege{} }
func (m *RegisteredPrivilege) String() string { return proto.CompactTextString(m) }
func (*RegisteredPrivilege) ProtoMessage()    {}
func (*RegisteredPrivilege) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbb24c05a9eda05e, []int{1}
}
func (m *RegisteredPrivilege) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisteredPrivilege) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisteredPrivilege.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisteredPrivilege) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredPrivilege.Merge(m, src)
}
func (m *RegisteredPrivilege) XXX_Size() int {
	return m.Size()
}
func (m *RegisteredPrivilege) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredPrivilege.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredPrivilege proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TgradeContractDetails)(nil), "confio.twasm.v1beta1.TgradeContractDetails")
	proto.RegisterType((*RegisteredPrivilege)(nil), "confio.twasm.v1beta1.RegisteredPrivilege")
}

func init() {
	proto.RegisterFile("confio/twasm/v1beta1/contract_extension.proto", fileDescriptor_cbb24c05a9eda05e)
}

var fileDescriptor_cbb24c05a9eda05e = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xbf, 0x4e, 0x02, 0x41,
	0x10, 0xc6, 0x6f, 0xd5, 0x18, 0x3d, 0x83, 0xc5, 0x09, 0x09, 0x50, 0xac, 0x84, 0x44, 0x83, 0x05,
	0xb7, 0x41, 0x3b, 0x4b, 0xd4, 0xc2, 0xc4, 0xc2, 0x5c, 0x28, 0x8c, 0xcd, 0xe5, 0x38, 0x86, 0x75,
	0x13, 0xd8, 0xb9, 0xec, 0xae, 0x08, 0x6f, 0x61, 0xe9, 0x23, 0xf8, 0x00, 0x3e, 0x04, 0x25, 0xb1,
	0xa2, 0x32, 0x72, 0xbc, 0x88, 0xe1, 0xfe, 0x35, 0xd2, 0xed, 0xec, 0xf7, 0x9b, 0xfd, 0x66, 0xe7,
	0xb3, 0xdb, 0x21, 0xca, 0xa1, 0x40, 0x66, 0xde, 0x02, 0x3d, 0x66, 0x93, 0x4e, 0x1f, 0x4c, 0xd0,
	0x61, 0x21, 0x4a, 0xa3, 0x82, 0xd0, 0xf8, 0x30, 0x35, 0x20, 0xb5, 0x40, 0xe9, 0x46, 0x0a, 0x0d,
	0x3a, 0xe5, 0x14, 0x77, 0x13, 0xdc, 0xcd, 0xf0, 0x7a, 0x99, 0x23, 0xc7, 0x04, 0x60, 0x9b, 0x53,
	0xca, 0xd6, 0x6b, 0x21, 0xea, 0x31, 0x6a, 0x3f, 0x15, 0xd2, 0x22, 0x95, 0x9a, 0x1f, 0xc4, 0xae,
	0xf4, 0xb8, 0x0a, 0x06, 0x70, 0x93, 0x39, 0xdd, 0x82, 0x09, 0xc4, 0x48, 0x3b, 0x03, 0xbb, 0xa2,
	0x80, 0x0b, 0x6d, 0x40, 0xc1, 0xc0, 0x8f, 0x94, 0x98, 0x88, 0x11, 0x70, 0xd0, 0x55, 0xd2, 0xd8,
	0x6d, 0x1d, 0x5d, 0x5e, 0xb8, 0xdb, 0x06, 0x70, 0xbd, 0xa2, 0xe5, 0x31, 0xef, 0xe8, 0xee, 0xcd,
	0x7f, 0x4e, 0x2d, 0xaf, 0xac, 0xfe, 0x4b, 0xfa, 0xba, 0xf6, 0xfd, 0xd5, 0xae, 0xe4, 0xd6, 0xf7,
	0x72, 0x88, 0x77, 0xf9, 0x3f, 0x9b, 0x4f, 0xf6, 0xc9, 0x96, 0xd7, 0x9c, 0xba, 0x7d, 0x10, 0xa1,
	0x16, 0x46, 0xa0, 0xac, 0x92, 0x06, 0x69, 0x95, 0xbc, 0xa2, 0x76, 0xce, 0xec, 0xe3, 0x62, 0x50,
	0xdf, 0xcc, 0x22, 0xa8, 0xee, 0x34, 0x48, 0xeb, 0xd0, 0x2b, 0x15, 0xb7, 0xbd, 0x59, 0x04, 0xdd,
	0x87, 0xf9, 0x8a, 0x5a, 0xcb, 0x15, 0x25, 0x9f, 0x31, 0x25, 0xf3, 0x98, 0x92, 0x45, 0x4c, 0xc9,
	0x6f, 0x4c, 0xc9, 0xfb, 0x9a, 0x5a, 0x8b, 0x35, 0xb5, 0x96, 0x6b, 0x6a, 0x3d, 0x9f, 0x73, 0x61,
	0x5e, 0x5e, 0xfb, 0x6e, 0x88, 0x63, 0x96, 0x67, 0x93, 0x6c, 0x8a, 0x4d, 0xb3, 0x90, 0x36, 0x0e,
	0xba, 0xbf, 0x9f, 0x6c, 0xf2, 0xea, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x96, 0x22, 0xa5, 0xa2, 0xc1,
	0x01, 0x00, 0x00,
}

func (this *TgradeContractDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TgradeContractDetails)
	if !ok {
		that2, ok := that.(TgradeContractDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RegisteredPrivileges) != len(that1.RegisteredPrivileges) {
		return false
	}
	for i := range this.RegisteredPrivileges {
		if !this.RegisteredPrivileges[i].Equal(&that1.RegisteredPrivileges[i]) {
			return false
		}
	}
	return true
}
func (this *RegisteredPrivilege) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisteredPrivilege)
	if !ok {
		that2, ok := that.(RegisteredPrivilege)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	if this.PrivilegeType != that1.PrivilegeType {
		return false
	}
	return true
}
func (m *TgradeContractDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TgradeContractDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TgradeContractDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegisteredPrivileges) > 0 {
		for iNdEx := len(m.RegisteredPrivileges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegisteredPrivileges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContractExtension(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegisteredPrivilege) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredPrivilege) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisteredPrivilege) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivilegeType) > 0 {
		i -= len(m.PrivilegeType)
		copy(dAtA[i:], m.PrivilegeType)
		i = encodeVarintContractExtension(dAtA, i, uint64(len(m.PrivilegeType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Position != 0 {
		i = encodeVarintContractExtension(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintContractExtension(dAtA []byte, offset int, v uint64) int {
	offset -= sovContractExtension(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TgradeContractDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegisteredPrivileges) > 0 {
		for _, e := range m.RegisteredPrivileges {
			l = e.Size()
			n += 1 + l + sovContractExtension(uint64(l))
		}
	}
	return n
}

func (m *RegisteredPrivilege) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != 0 {
		n += 1 + sovContractExtension(uint64(m.Position))
	}
	l = len(m.PrivilegeType)
	if l > 0 {
		n += 1 + l + sovContractExtension(uint64(l))
	}
	return n
}

func sovContractExtension(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContractExtension(x uint64) (n int) {
	return sovContractExtension(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TgradeContractDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TgradeContractDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TgradeContractDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredPrivileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContractExtension
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContractExtension
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredPrivileges = append(m.RegisteredPrivileges, RegisteredPrivilege{})
			if err := m.RegisteredPrivileges[len(m.RegisteredPrivileges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContractExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisteredPrivilege) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractExtension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredPrivilege: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredPrivilege: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivilegeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractExtension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractExtension
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractExtension
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivilegeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContractExtension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractExtension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContractExtension(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContractExtension
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractExtension
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractExtension
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContractExtension
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContractExtension
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContractExtension
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContractExtension        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContractExtension          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContractExtension = fmt.Errorf("proto: unexpected end of group")
)
