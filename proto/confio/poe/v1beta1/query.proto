syntax = "proto3";
package confio.poe.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/api/annotations.proto";
import "confio/poe/v1beta1/poe.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "cosmos/staking/v1beta1/query.proto";

option go_package = "github.com/confio/tgrade/x/poe/types";

// Query defines the gRPC querier service.
service Query {
  // ContractAddress queries the address for one of the PoE contracts
  rpc ContractAddress(QueryContractAddressRequest)
      returns (QueryContractAddressResponse) {
    option (google.api.http).get =
        "/tgrade/poe/v1beta1/contract/{contract_type}";
  }

  // Validators queries all validators that match the given status.
  rpc Validators(cosmos.staking.v1beta1.QueryValidatorsRequest)
      returns (cosmos.staking.v1beta1.QueryValidatorsResponse) {
    option (google.api.http).get = "/tgrade/poe/v1beta1/validators";
  }

  // Validator queries validator info for given validator address.
  rpc Validator(cosmos.staking.v1beta1.QueryValidatorRequest)
      returns (cosmos.staking.v1beta1.QueryValidatorResponse) {
    option (google.api.http).get =
        "/tgrade/poe/v1beta1/validators/{validator_addr}";
  }
  // Validator queries validator info for given validator address.
  rpc UnbondingPeriod(QueryUnbondingPeriodRequest)
      returns (QueryUnbondingPeriodResponse) {
    option (google.api.http).get = "/tgrade/poe/v1beta1/unbonding";
  }

  // ValidatorDelegation queries self delegated amount for given validator.
  rpc ValidatorDelegation(QueryValidatorDelegationRequest)
      returns (QueryValidatorDelegationResponse) {
    option (google.api.http).get =
        "/poe/tgrade/v1beta1/validators/{validator_addr}/delegation";
  }

  // ValidatorUnbondingDelegations queries unbonding delegations of a validator.
  rpc ValidatorUnbondingDelegations(QueryValidatorUnbondingDelegationsRequest)
      returns (QueryValidatorUnbondingDelegationsResponse) {
    option (google.api.http).get = "/tgrade/poe/v1beta1/validators/"
                                   "{validator_addr}/unbonding_delegations";
  }

  // HistoricalInfo queries the historical info for given height.
  rpc HistoricalInfo(cosmos.staking.v1beta1.QueryHistoricalInfoRequest)
      returns (cosmos.staking.v1beta1.QueryHistoricalInfoResponse) {
    option (google.api.http).get =
        "/tgrade/poe/v1beta1/historical_info/{height}";
  }

  // ValidatorOutstandingRewards queries rewards of a validator address.
  rpc ValidatorOutstandingReward(QueryValidatorOutstandingRewardRequest)
      returns (QueryValidatorOutstandingRewardResponse) {
    option (google.api.http).get = "/tgrade/poe/v1beta1/validators/"
                                   "{validator_address}/outstanding_reward";
  }

  // ValidatorEngagementReward queries rewards of a validator address.
  rpc ValidatorEngagementReward(QueryValidatorEngagementRewardRequest)
      returns (QueryValidatorEngagementRewardResponse) {
    option (google.api.http).get = "/tgrade/poe/v1beta1/validators/"
                                   "{validator_address}/engagement_reward";
  }
}

// QueryContractAddressRequest is the request type for the Query/ContractAddress
// RPC method.
message QueryContractAddressRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // ContractType is the type of contract
  poe.v1beta1.PoEContractType contract_type = 1;
}

// QueryContractAddressRequest is the response type for the
// Query/ContractAddress RPC method.
message QueryContractAddressResponse { string address = 1; }

// QueryUnbondingPeriodRequest is request type for the Query/UnbondingPeriod RPC
// method
message QueryUnbondingPeriodRequest {}

// QueryUnbondingPeriodResponse is response type for the Query/UnbondingPeriod
// RPC method
message QueryUnbondingPeriodResponse {
  // Time is the time that must pass
  google.protobuf.Duration time = 1
      [ (gogoproto.nullable) = false, (gogoproto.stdduration) = true ];
}

// QueryValidatorDelegationRequest is request type for the
// Query/ValidatorDelegation RPC method
message QueryValidatorDelegationRequest {
  // validator_addr defines the validator address to query for.
  string validator_addr = 1;
}

// QueryValidatorDelegationResponse is response type for the
// Query/ValidatorDelegation RPC method
message QueryValidatorDelegationResponse {
  cosmos.base.v1beta1.Coin balance = 1 [ (gogoproto.nullable) = false ];
}

// QueryValidatorUnbondingDelegationsRequest is required type for the
// Query/ValidatorUnbondingDelegations RPC method
message QueryValidatorUnbondingDelegationsRequest {
  // validator_addr defines the validator address to query for.
  string validator_addr = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryValidatorUnbondingDelegationsResponse is response type for the
// Query/ValidatorUnbondingDelegations RPC method.
message QueryValidatorUnbondingDelegationsResponse {
  repeated cosmos.staking.v1beta1.UnbondingDelegationEntry entries = 1
      [ (gogoproto.nullable) = false ]; // unbonding delegation entries

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryValidatorOutstandingRewardRequest is the request type for the
// Query/ValidatorOutstandingReward RPC method.
message QueryValidatorOutstandingRewardRequest {
  // validator_address defines the validator address to query for.
  string validator_address = 1;
}

// QueryValidatorOutstandingRewardResponse is the response type for the
// Query/ValidatorOutstandingReward RPC method.
message QueryValidatorOutstandingRewardResponse {
  cosmos.base.v1beta1.DecCoin reward = 1 [
    (gogoproto.moretags) = "yaml:\"reward\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoin",
    (gogoproto.nullable) = false
  ];
}

// QueryValidatorEngagementRewardRequest is the request type for the
// Query/ValidatorEngagementReward RPC method.
message QueryValidatorEngagementRewardRequest {
  // validator_address defines the validator address to query for.
  string validator_address = 1;
}

// QueryValidatorEngagementRewardResponse is the response type for the
// Query/ValidatorEngagementReward RPC method.
message QueryValidatorEngagementRewardResponse {
  cosmos.base.v1beta1.DecCoin reward = 1 [
    (gogoproto.moretags) = "yaml:\"reward\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoin",
    (gogoproto.nullable) = false
  ];
}
